{"ast":null,"code":"import { mergeProps as _mergeProps, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"span\", _mergeProps($props.minutes.value, {\n    id: \"minutes\"\n  }), null, 16 /* FULL_PROPS */), _createTextVNode(\":\"), _createElementVNode(\"span\", _mergeProps($props.seconds.value, {\n    id: \"seconds\"\n  }), null, 16 /* FULL_PROPS */)]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","_mergeProps","$props","minutes","value","id","seconds"],"sources":["/Users/jakub.stribrny/Documents/GitHub/timer/src/components/RobotGameTimer.vue"],"sourcesContent":["<script setup>\nconst props = defineProps(['minutes', 'seconds'])\n\nlet fulltime = 150;\n\nfunction countdown(seconds) {\n  if (true != false) {\n\n  }\n}\n\nlet interval = 1000; // ms\nlet expected = Date.now() + interval;\nsetTimeout(step, interval);\n\nfunction step() {\n  let dt = Date.now() - expected;\n  if (dt > interval) {\n    console.log(\"problem\")\n  }\n\n  expected += interval;\n  console.log(expected)\n  setTimeout(step, Math.max(0, interval - dt))\n}\n</script>\n\n<template>\n  <div>\n    <span v-bind=\"minutes.value\" id=\"minutes\"></span>:<span v-bind=\"seconds.value\" id=\"seconds\"></span>\n  </div>\n</template>\n\n<style scoped>\n\n</style>"],"mappings":";;uBA4BEA,mBAAA,CAEM,cADJC,mBAAA,CAAiD,QAAjDC,WAAA,CAAcC,MAAmC,CAAAC,OAA5B,CAACC,KAAK;IAAEC,EAAE,EAAC;EAAS,gC,iBAAQ,GAAC,GAAAL,mBAAA,CAAiD,QAAjDC,WAAA,CAAcC,MAAmC,CAAAI,OAA5B,CAACF,KAAK;IAAEC,EAAE,EAAC;EAAS,+B"},"metadata":{},"sourceType":"module","externalDependencies":[]}